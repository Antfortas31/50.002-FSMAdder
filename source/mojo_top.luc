module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    // define FPGA outputs (FA inputs) and FPGA inputs (FA outputs)
    input sum,
    input cout,
    output ain,
    output bin,
    output cin  
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    //define two buttons (up and center) for automatic and manual checking
    edge_detector edge_detector(#RISE(1), #FALL(0));
    button_conditioner button_cond;
    edge_detector edge_detector2(#RISE(1),#FALL(0));
    button_conditioner button_cond2;
    reset_conditioner reset_cond;

      .rst(rst){
        dff clock[28]; //28 bit counter used as a clock
        fsm state = {START,AAA,AAB,ABA,ABB,BAA,BAB,BBA,BBB,FAILURE,SUCCESS,MANUAL}; //(cin,a,b), A=0,B=1. (AAA = 000, ABA = 010 etc.)
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    //deboucning buttons
    button_cond.in = io_button[0];
    edge_detector.in = button_cond.out;
    button_cond2.in = io_button[1];
    edge_detector2.in = button_cond2.out;
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    
    case (state.q){
      state.START: //standby state, reset all outputs and clock
        ain = 0;
        bin = 0;
        cin = 0;  
        clock.d = 0;
        io_led[2][7] = 1;
        if (edge_detector.out == 1){ //io_button up for automatic mode (transition to first state AAA)
          io_led[2][7] = 0;
          clock.d = 0;
          state.d = state.AAA;
        }
        if (edge_detector2.out == 1){ //io_button down for manual mode
          io_led[2][7] = 0;
          clock.d = 0;
          state.d = state.MANUAL;
        }
        
     state.AAA:
        clock.d = 0; //reset all outputs
        clock.d = clock.q + 1; //start counting up the clock
        cin = 0;
        ain = 0;
        bin = 0;
        io_led[0][0] = 1; //show one right row LED for each state (ie rightmost for this first state etc.)
        if (cout == 0 && sum == 0){ //transition to next state
          io_led[0][0] = 0;
          state.d = state.AAB;
        }
        else if (clock.q[25] == 1){ //if outputs do not match expected after a delay for the circuit, transition to failure state
                                    //if it transitions to failure state, it is possible to tell which state number failed by looking at the right row LED
          io_led[0][0] = 1;
          state.d = state.FAILURE;
        }
        
     state.AAB:
        clock.d = 0; //same as above
        clock.d = clock.q + 1;
        cin = 0;
        ain = 0;
        bin = 1;
        io_led[0][1] = 1;
        if (cout == 0 && sum == 1){
          io_led[0][1] = 0;
          state.d = state.ABA;
        }
        else if (clock.q[25] == 1){
          io_led[0][1] = 1;
          state.d = state.FAILURE;
        }
        
     state.ABA:
        clock.d = 0;
        clock.d = clock.q + 1;
        cin = 0;
        ain = 1;
        bin = 0;
        io_led[0][2] = 1;
        if (cout == 0 && sum == 1){
          io_led[0][2] = 0;
          state.d = state.ABB;
        }
        else if (clock.q[25] == 1){
          io_led[0][2] = 1;
          state.d = state.FAILURE;
        }
        
     state.ABB:
        clock.d = 0;
        clock.d = clock.q + 1;
        cin = 0;
        ain = 1;
        bin = 1;
        io_led[0][3] = 1;
        if (cout == 1 && sum == 0){
          io_led[0][3] = 0;
          state.d = state.BAA;
        }
        else if (clock.q[25] == 1){
          io_led[0][3] = 1;
          state.d = state.FAILURE;
        }
        
     state.BAA:
        clock.d = 0;
        clock.d = clock.q + 1;
        cin = 1;
        ain = 0;
        bin = 0;
        io_led[0][4] = 1;
        if (cout == 0 && sum == 1){
          io_led[0][4] = 0;
          state.d = state.BAB;
        }
        else if (clock.q[25] == 1){
          io_led[0][4] = 1;
          state.d = state.FAILURE;
        }
        
     state.BAB:
        clock.d = 0;
        clock.d = clock.q + 1;
        cin = 1;
        ain = 0;
        bin = 1;
        io_led[0][5] = 1;
        if (cout == 1 && sum == 0){
          io_led[0][5] = 0;
          state.d = state.BBA;
        }
        else if (clock.q[25] == 1){
          io_led[0][1] = 1;
          state.d = state.FAILURE;
        }
        
     state.BBA:
        clock.d = 0;
        clock.d = clock.q + 1;
        cin = 1;
        ain = 1;
        bin = 0;
        io_led[0][6] = 1;
        if (cout == 1 && sum == 0){
          io_led[0][6] = 0;
          state.d = state.BBB;
        }
        else if (clock.q[25] == 1){
          io_led[0][1] = 1;
          state.d = state.FAILURE;
        }
        
     state.BBB:
        clock.d = 0;
        clock.d = clock.q + 1;
        cin = 1;
        ain = 1;
        bin = 1;
        io_led[0][7] = 1;
        if (cout == 1 && sum == 1){
          io_led[0][7] = 0;
          state.d = state.SUCCESS;
        }
        else if (clock.q[25] == 1){
          io_led[0][7] = 1;
          state.d = state.FAILURE;
        }
        
      state.MANUAL:
        //set ain,bin,cin according to the rightmost dip switches (right to left: ain, bin, cin)
        ain = io_dip [0][0];
        bin = io_dip [0][1];
        cin = io_dip [0][2];
        clock.d = 0;
        clock.d = clock.q + 1;
        //if (io_dip[0][0] == 1){ //used to test if output is working
        //  io_led[0][0] = 1;
        //}
        if (io_dip[0][0]+io_dip[0][1]+io_dip[0][2] == sum + cout*2){ //match output to expected output by utilising the math behind one-bit full adder
          ain = 0;
          bin = 0;
          cin = 0;
          clock.d = 0;
          state.d = state.SUCCESS;
        }
        else if (clock.q[27] == 1){ //fail if output does not match within a certain time
          ain = 0;
          bin = 0;
          cin = 0;
          clock.d = 0;
          state.d = state.FAILURE;
        }
      
      state.SUCCESS:
         ain = 0;
         bin = 0;
         cin = 0;
        io_led[1] = 8hFF; //flash center LED row if all outputs are correct
        clock.d = clock.q + 1;
        if (clock.q[27] == 1){
          io_led[1] = 8h00;
          clock.d = 0;
          state.d = state.START; //return to standby
        }
      
      state.FAILURE:
         ain = 0;
         bin = 0;
         cin = 0;
        io_led[2] = 8hFF; //flash left LED row if one of the checks went wrong
        clock.d = clock.q + 1;
        if (clock.q[27] == 1){
          io_led[0] = 8h00;
          io_led[1] = 8h00;
          io_led[2] = 8h00;
          clock.d = 0;
          state.d = state.START; //return to standby
        }   
        
      default: //set all outputs to low by default
         ain = 0;
         bin = 0;
         cin = 0;
             
    }
  }
}