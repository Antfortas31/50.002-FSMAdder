/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input sum,
    input cout,
    output reg ain,
    output reg bin,
    output reg cin
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_1 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_2 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  wire [1-1:0] M_edge_detector2_out;
  reg [1-1:0] M_edge_detector2_in;
  edge_detector_1 edge_detector2 (
    .clk(clk),
    .in(M_edge_detector2_in),
    .out(M_edge_detector2_out)
  );
  wire [1-1:0] M_button_cond2_out;
  reg [1-1:0] M_button_cond2_in;
  button_conditioner_2 button_cond2 (
    .clk(clk),
    .in(M_button_cond2_in),
    .out(M_button_cond2_out)
  );
  wire [1-1:0] M_edge_detector3_out;
  reg [1-1:0] M_edge_detector3_in;
  edge_detector_1 edge_detector3 (
    .clk(clk),
    .in(M_edge_detector3_in),
    .out(M_edge_detector3_out)
  );
  wire [1-1:0] M_button_cond3_out;
  reg [1-1:0] M_button_cond3_in;
  button_conditioner_2 button_cond3 (
    .clk(clk),
    .in(M_button_cond3_in),
    .out(M_button_cond3_out)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_7 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [27:0] M_clock_d, M_clock_q = 1'h0;
  localparam START_state = 4'd0;
  localparam AAA_state = 4'd1;
  localparam AAB_state = 4'd2;
  localparam ABA_state = 4'd3;
  localparam ABB_state = 4'd4;
  localparam BAA_state = 4'd5;
  localparam BAB_state = 4'd6;
  localparam BBA_state = 4'd7;
  localparam BBB_state = 4'd8;
  localparam FAILURE_state = 4'd9;
  localparam SUCCESS_state = 4'd10;
  localparam MANUAL_state = 4'd11;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_clock_d = M_clock_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_button_cond_in = io_button[0+0-:1];
    M_edge_detector_in = M_button_cond_out;
    M_button_cond2_in = io_button[1+0-:1];
    M_edge_detector2_in = M_button_cond2_out;
    M_button_cond3_in = io_button[2+0-:1];
    M_edge_detector3_in = M_button_cond3_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    
    case (M_state_q)
      START_state: begin
        ain = 1'h0;
        bin = 1'h0;
        cin = 1'h0;
        M_clock_d = 1'h0;
        io_led[16+7+0-:1] = 1'h1;
        if (M_edge_detector_out == 1'h1) begin
          io_led[16+7+0-:1] = 1'h0;
          M_clock_d = 1'h0;
          M_state_d = AAA_state;
        end
        if (M_edge_detector2_out == 1'h1) begin
          io_led[16+7+0-:1] = 1'h0;
          M_clock_d = 1'h0;
          M_state_d = MANUAL_state;
        end
      end
      AAA_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h0;
        ain = 1'h0;
        bin = 1'h0;
        io_led[0+0+0-:1] = 1'h1;
        if (cout == 1'h0 && sum == 1'h0) begin
          io_led[0+0+0-:1] = 1'h0;
          M_state_d = AAB_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+0+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      AAB_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h0;
        ain = 1'h0;
        bin = 1'h1;
        io_led[0+1+0-:1] = 1'h1;
        if (cout == 1'h0 && sum == 1'h1) begin
          io_led[0+1+0-:1] = 1'h0;
          M_state_d = ABA_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+1+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      ABA_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h0;
        ain = 1'h1;
        bin = 1'h0;
        io_led[0+2+0-:1] = 1'h1;
        if (cout == 1'h0 && sum == 1'h1) begin
          io_led[0+2+0-:1] = 1'h0;
          M_state_d = ABB_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+2+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      ABB_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h0;
        ain = 1'h1;
        bin = 1'h1;
        io_led[0+3+0-:1] = 1'h1;
        if (cout == 1'h1 && sum == 1'h0) begin
          io_led[0+3+0-:1] = 1'h0;
          M_state_d = BAA_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+3+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      BAA_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h1;
        ain = 1'h0;
        bin = 1'h0;
        io_led[0+4+0-:1] = 1'h1;
        if (cout == 1'h0 && sum == 1'h1) begin
          io_led[0+4+0-:1] = 1'h0;
          M_state_d = BAB_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+4+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      BAB_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h1;
        ain = 1'h0;
        bin = 1'h1;
        io_led[0+5+0-:1] = 1'h1;
        if (cout == 1'h1 && sum == 1'h0) begin
          io_led[0+5+0-:1] = 1'h0;
          M_state_d = BBA_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+1+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      BBA_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h1;
        ain = 1'h1;
        bin = 1'h0;
        io_led[0+6+0-:1] = 1'h1;
        if (cout == 1'h1 && sum == 1'h0) begin
          io_led[0+6+0-:1] = 1'h0;
          M_state_d = BBB_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+1+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      BBB_state: begin
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        cin = 1'h1;
        ain = 1'h1;
        bin = 1'h1;
        io_led[0+7+0-:1] = 1'h1;
        if (cout == 1'h1 && sum == 1'h1) begin
          io_led[0+7+0-:1] = 1'h0;
          M_state_d = SUCCESS_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1) begin
            io_led[0+7+0-:1] = 1'h1;
            M_state_d = FAILURE_state;
          end
        end
      end
      MANUAL_state: begin
        ain = io_dip[0+0+0-:1];
        bin = io_dip[0+1+0-:1];
        cin = io_dip[0+2+0-:1];
        M_clock_d = 1'h0;
        M_clock_d = M_clock_q + 1'h1;
        if (io_dip[0+0+0-:1] == 1'h1) begin
          io_led[0+0+0-:1] = 1'h1;
        end
        if (io_dip[0+0+0-:1] + io_dip[0+1+0-:1] + io_dip[0+2+0-:1] == sum + cout * 2'h2) begin
          ain = 1'h0;
          bin = 1'h0;
          cin = 1'h0;
          M_clock_d = 1'h0;
          M_state_d = SUCCESS_state;
        end else begin
          if (M_clock_q[27+0-:1] == 1'h1) begin
            ain = 1'h0;
            bin = 1'h0;
            cin = 1'h0;
            M_clock_d = 1'h0;
            M_state_d = FAILURE_state;
          end
        end
      end
      SUCCESS_state: begin
        ain = 1'h0;
        bin = 1'h0;
        cin = 1'h0;
        io_led[8+7-:8] = 8'hff;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[27+0-:1] == 1'h1) begin
          io_led[8+7-:8] = 8'h00;
          M_clock_d = 1'h0;
          M_state_d = START_state;
        end
      end
      FAILURE_state: begin
        ain = 1'h0;
        bin = 1'h0;
        cin = 1'h0;
        io_led[16+7-:8] = 8'hff;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[27+0-:1] == 1'h1) begin
          io_led[0+7-:8] = 8'h00;
          io_led[8+7-:8] = 8'h00;
          io_led[16+7-:8] = 8'h00;
          M_clock_d = 1'h0;
          M_state_d = START_state;
        end
      end
      default: begin
        ain = 1'h0;
        bin = 1'h0;
        cin = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_clock_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_clock_q <= M_clock_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
